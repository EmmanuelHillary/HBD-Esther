#!/usr/bin/env node
const chalk = require('chalk');
const Promise = require('bluebird');
const { Config } = require('../lib/config');
const { Command } = require('commander');
const _ = require('lodash');

const program = new Command();

const { Deploy, ENV_LOOKUP } = require('../lib/deploy');

function parse_variable_string(variable_string) {
  // we need to split like so because it's possible for a string value to have = in it.
  const [key, ...values] = variable_string.trim().split('=');
  // eventually we will support multiple config updates
  return [{
    name: key,
    value: values.join('='),
  }];
}

async function update_variables(app, env, variables) {
  const variable_object = parse_variable_string(variables);
  console.log(chalk.gray('Setting environment variables.....'));
  const config = new Config(env, app);
  try {
    await config.update_variables(variable_object);
    console.log(chalk.gray('Environment variables successfully set.'));
  } catch (e) {
    console.log(chalk`{gray Environment variables could not be set} - {cyan ${e}}`);
    process.exit(0);
  }
}

async function run() {
  program.command('set')
  .description('Sets the environment variables for a specified application')
  .argument('<string>', 'Configuration variable to be set')
  .option('-e, --env <string>', 'environment type to be updated')
  .option('-a, --app <string>', 'application to update')
  .action(async (str, options) => {
    const env = options.env;
    const app = options.app;

    if (!app) {
      console.log(chalk`{red ERROR:} application {cyan --app} not specified.`);
      process.exit(0);
    }

    if (!env) {
      console.log(chalk`{red ERROR:} environment {cyan --env} not specified.`);
      process.exit(0);
    }

    await update_variables(env, app, str);
  });

  program.parse();
}

try {
  Promise.resolve(run())
  .catch((e) => {
    console.error('Error in promise', e);
  })
} catch (e) {
  console.error('Error', e);
}