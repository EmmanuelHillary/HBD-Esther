const moment = require('moment');
const chalk = require('chalk');

const HORIZONTAL_RULE = chalk`{grey -------------------------------------------------------------------------------}`;
const value_color = (val) => val ? 'yellow' : 'red';

const format_date = (date) => {
  return moment(date).format('d/mm/yyyy');
};

exports.app_status_table = (d) => {
  let arrow = 'green';
  let icon = '----->';
  if (!d.can_deploy) {
    arrow = 'red';
    icon = '-----x';
  }

  if (d.is_deploying) {
    arrow = 'blueBright';
    icon = 'Deploying';
    current_build = d.last_build;
    current_deploy = d.current_deployments.find((deploy) => deploy.state === 'in_progress');
  }

  const build_age = moment(d.last_build.created_at).fromNow();
  const deploy_age = moment(d.last_deploy.created_at).fromNow();

  return [
    chalk`{white ${d.app_id.toUpperCase().padEnd(6)} Status }{grey | {cyan Latest Build}   {${arrow} ${icon}} {blueBright ${d.DEPLOY_ENV.padEnd(16)}}}`,
    chalk`{grey --------------+----------------------------------------------------------------}`,
    chalk`     {grey build_id |}  {yellow ${d.last_build.id}}       {blueBright ${d.last_deploy.build.id}}`,
    chalk` {grey build_number |  #{yellow ${`${d.last_build.build_no}`.padEnd(16)}} #{blueBright ${`${d.last_deploy.build.build_no}`.padEnd(22)}}}`,
    chalk`      {grey created |}  {yellow ${moment(d.last_build.created_at).format('DD/MM/YYYY')}}      {blueBright ${moment(d.last_deploy.created_at).format('DD/MM/YYYY')}}`,
    chalk`          {grey age |}  {yellow ${build_age.padEnd(16)}}{blueBright ${deploy_age.padEnd(16)}}`,
  ].join('\n');
}

exports.bad_internal_alert = (d) => [
  chalk`{red ERROR!} {grey ------------------------------------------------------------------------------}`,
  chalk`{cyan ${d.app_id.toUpperCase()}} is currently serving a newer build in {blueBright ${d.DEPLOY_ENV}} than the available build currently set to deploy`,
  chalk`Please ping {magenta #infra} on slack for assistance`,
  HORIZONTAL_RULE,
  chalk`{grey exiting deploy script without a deploy...}`,
].join('\n');

exports.build_choice_summary = (build) => [
  chalk`    build_id: {${value_color(build._id)} ${build._id}}`,
  chalk`    build_number: #{${value_color(build.build_number)} ${build.build_no}}`,
  chalk`    build age: {yellow ${moment(build.created_at).format('dd/mm/YYYY')}}`,
].join('\n');

exports.compare_builds = (d, target_build, destination_build) => {
  let arrow = 'red';
  let icon = 'x';
  let colors = ['red', 'red'];

  if (d.can_deploy) {
    arrow = 'green';
    colors = ['cyan', 'green'];
    icon = '>';
  }

  const target_age = moment(target_build.created_at).fromNow();
  const destination_age = moment(destination_build.created_at).fromNow();

  return [
    chalk`{white Deploy Builds} {grey |} {${colors[0]} Target Build}   {${arrow} -----${icon}} {${colors[1]} Destination Build}`,
    chalk`{grey -------------------------------------------------------------------------------}`,
    chalk`     {grey build_id |}  {${colors[0]} ${target_build._id}}                 {${colors[1]} ${destination_build._id}}`,
    chalk` {grey build_number | #{${colors[0]} ${target_build.build_no}}              #{${colors[1]} ${destination_build.build_no}}}`,
    chalk`      {grey created |}  {${colors[0]} ${format_date(target_build.created_at)}}     {${colors[1]} ${format_date(destination_build.created_at)}}`,
    chalk`          {grey age |}  {${colors[0]} ${target_age.padEnd(16)}}     {${colors[1]} ${destination_age.padEnd(16)}}`,
    chalk`  {grey deployed to |}  {${colors[0]} latest build}     {${colors[1]} ${d.DEPLOY_ENV}}`,
    chalk`{grey -------------------------------------------------------------------------------}`,
  ].join('\n');
}

exports.deploy_prod = (d, target_build) => [
  chalk`This will deploy the above target build (#{yellow ${target_build.build_no}}) to {cyan ${d.DEPLOY_ENV}} at {green ${d.DEPLOY_DOMAIN}}`,
  HORIZONTAL_RULE,
].join('\n');